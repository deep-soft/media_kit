import java.io.File
import java.nio.file.Files
import java.security.MessageDigest

group 'com.alexmercerind.media_kit_libs_android_video'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    // Conditional for compatibility with AGP <4.2.
    if (project.android.hasProperty("namespace")) {
        namespace 'com.alexmercerind.media_kit_libs_android_video'
    }

    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
    }

    dependencies {
        implementation fileTree(dir: "$buildDir/output", include: "*.jar")
    }
}

task downloadDependencies(type: Exec) {

    // Delete previously created /output subdirectory.

    def outputDir = file("$buildDir/output")
    if (outputDir.exists()) {
        outputDir.deleteDir()
    }
    
    // Download all *.jar dependencies & verify their MD5 checksums.

    def urlDefaultARM64 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.0.1/default-arm64-v8a.jar"
    def urlDefaultARMEABI = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.0.1/default-armeabi-v7a.jar"
    def urlDefaultX86_64 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.0.1/default-x86_64.jar"
    def urlDefaultX86 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.0.1/default-x86.jar"

    def urlNoFFmpegARM64 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.0.1/no-ffmpeg-default-arm64-v8a.jar"
    def urlNoFFmpegARMEABI = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.0.1/no-ffmpeg-default-armeabi-v7a.jar"
    def urlNoFFmpegX86_64 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.0.1/no-ffmpeg-default-x86_64.jar"
    def urlNoFFmpegX86 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.0.1/no-ffmpeg-default-x86.jar"

    def destDefaultARM64 = file("$buildDir/v1.0.1/default-arm64-v8a.jar")
    def destDefaultARMEABI = file("$buildDir/v1.0.1/default-armeabi-v7a.jar")
    def destDefaultX86_64 = file("$buildDir/v1.0.1/default-x86_64.jar")
    def destDefaultX86 = file("$buildDir/v1.0.1/default-x86.jar")
    
    def destNoFFmpegARM64 = file("$buildDir/v1.0.1/no-ffmpeg-default-arm64-v8a.jar")
    def destNoFFmpegARMEABI = file("$buildDir/v1.0.1/no-ffmpeg-default-armeabi-v7a.jar")
    def destNoFFmpegX86_64 = file("$buildDir/v1.0.1/no-ffmpeg-default-x86_64.jar")
    def destNoFFmpegX86 = file("$buildDir/v1.0.1/no-ffmpeg-default-x86.jar")

    if (!destDefaultARM64.exists()) {
        destDefaultARM64.parentFile.mkdirs()
        destDefaultARM64.withOutputStream { os ->
            os << new URL(urlDefaultARM64).openStream()
        }
    }
    if (!destDefaultARMEABI.exists()) {
        destDefaultARMEABI.parentFile.mkdirs()
        destDefaultARMEABI.withOutputStream { os ->
            os << new URL(urlDefaultARMEABI).openStream()
        }
    }
    if (!destDefaultX86_64.exists()) {
        destDefaultX86_64.parentFile.mkdirs()
        destDefaultX86_64.withOutputStream { os ->
            os << new URL(urlDefaultX86_64).openStream()
        }
    }
    if (!destDefaultX86.exists()) {
        destDefaultX86.parentFile.mkdirs()
        destDefaultX86.withOutputStream { os ->
            os << new URL(urlDefaultX86).openStream()
        }
    }

    if (!destNoFFmpegARM64.exists()) {
        destNoFFmpegARM64.parentFile.mkdirs()
        destNoFFmpegARM64.withOutputStream { os ->
            os << new URL(urlNoFFmpegARM64).openStream()
        }
    }

    if (!destNoFFmpegARMEABI.exists()) {
        destNoFFmpegARMEABI.parentFile.mkdirs()
        destNoFFmpegARMEABI.withOutputStream { os ->
            os << new URL(urlNoFFmpegARMEABI).openStream()
        }
    }

    if (!destNoFFmpegX86_64.exists()) {
        destNoFFmpegX86_64.parentFile.mkdirs()
        destNoFFmpegX86_64.withOutputStream { os ->
            os << new URL(urlNoFFmpegX86_64).openStream()
        }
    }

    if (!destNoFFmpegX86.exists()) {
        destNoFFmpegX86.parentFile.mkdirs()
        destNoFFmpegX86.withOutputStream { os ->
            os << new URL(urlNoFFmpegX86).openStream()
        }
    }

    def md5DefaultARM64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destDefaultARM64.toPath())).encodeHex().toString()
    def md5DefaultARMEABI = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destDefaultARMEABI.toPath())).encodeHex().toString()
    def md5DefaultX86_64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destDefaultX86_64.toPath())).encodeHex().toString()
    def md5DefaultX86 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destDefaultX86.toPath())).encodeHex().toString()
    
    def md5NoFFmpegARM64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destNoFFmpegARM64.toPath())).encodeHex().toString()
    def md5NoFFmpegARMEABI = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destNoFFmpegARMEABI.toPath())).encodeHex().toString()
    def md5NoFFmpegX86_64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destNoFFmpegX86_64.toPath())).encodeHex().toString()
    def md5NoFFmpegX86 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destNoFFmpegX86.toPath())).encodeHex().toString()

    if (md5DefaultARM64 != "518ca06a2f16ae35c03725b2a4e7d71a") {
        throw new GradleException("media_kit: arm64-v8a JAR verification failed.")
    }
    if (md5DefaultARMEABI != "34b5302a7e50774a68a8caad5ff91383") {
        throw new GradleException("media_kit: armeabi-v7a JAR verification failed.")
    }
    if (md5DefaultX86_64 != "14ed63a20a37a04efafcd0033e573f65") {
        throw new GradleException("media_kit: x86_64 JAR verification failed.")
    }
    if (md5DefaultX86 != "5c2073e39a04d5797a4ee68b89213652") {
        throw new GradleException("media_kit: x86 JAR verification failed.")
    }

    if (md5NoFFmpegARM64 != "a035a0e9f47e1304faf9ec687d8d3932") {
        throw new GradleException("media_kit: arm64-v8a JAR verification failed.")
    }
    if (md5NoFFmpegARMEABI != "cc60970c66959ffb1401eb354d24133e") {
        throw new GradleException("media_kit: armeabi-v7a JAR verification failed.")
    }
    if (md5NoFFmpegX86_64 != "da6a3f82d99b879cd8a5831c4dda80ff") {
        throw new GradleException("media_kit: x86_64 JAR verification failed.")
    }
    if (md5NoFFmpegX86 != "083efe9492d0f94317f6f6707c579a2b") {
        throw new GradleException("media_kit: x86 JAR verification failed.")
    }

    // Check if package:ffmpeg_kit_flutter is present in pubspec.lock.

    def normal = true;

    def pubspec = file("$buildDir/../../pubspec.lock")
    if (!pubspec.exists()) {
        println "media_kit: WARNING: pubspec.lock not found."
    } else {
        normal = !pubspec.text.contains("ffmpeg_kit_flutter")
    }
    if (!normal) {
        println "media_kit: package:ffmpeg_kit_flutter found..."
        println "media_kit: Skipping FFmpeg download..."
    }

    // Create a copy of the selected *.jar files to an /output subdirectory.

    if (normal) {
        copy {
            from destDefaultARM64
            into "$buildDir/output"
        }
        copy {
            from destDefaultARMEABI
            into "$buildDir/output"
        }
        copy {
            from destDefaultX86_64
            into "$buildDir/output"
        }
        copy {
            from destDefaultX86
            into "$buildDir/output"
        }
    } else {
        copy {
            from destNoFFmpegARM64
            into "$buildDir/output"
        }
        copy {
            from destNoFFmpegARMEABI
            into "$buildDir/output"
        }
        copy {
            from destNoFFmpegX86_64
            into "$buildDir/output"
        }
        copy {
            from destNoFFmpegX86
            into "$buildDir/output"
        }
    }
}

assemble.dependsOn(downloadDependencies)
